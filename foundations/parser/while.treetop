grammar Simple
  rule statement
    sequence
  end

  rule sequence
    first:sequenced_statement '; ' second:sequence {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    while / await / assign / if / do_nothing
  end

  rule while
    'while (' condition:expression ') do (' body:statement ')' {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule await
    'await (' condition:expression ') then (' body:simple_statement ')' {
      def to_ast
        Await.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule simple_statement
    simple_sequence
  end

  rule simple_sequence
    first:simple_sequenced_statement '; ' second:simple_sequence {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    simple_sequenced_statement
  end

  rule simple_sequenced_statement
    assign / if / do_nothing
  end

  rule assign
    name:[a-z]+ ' := ' expression {
      def to_ast
        Assign.new(name.text_value.to_sym, expression.to_ast)
      end
    }
  end

  rule if
    'if (' condition:expression ') then (' consequence:statement ') else (' alternative:statement ')' {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule do_nothing
    'skip' {
      def to_ast
        DoNothing.new
      end
    }
  end

  rule expression
  left:add ' > ' right:greater_than {
    def to_ast
      GreaterThan.new(left.to_ast, right.to_ast)
    end
  }
  /
  left:add ' < ' right:less_than {
    def to_ast
      LessThan.new(left.to_ast, right.to_ast)
    end
  }
  /
  left:add ' >= ' right:greater_than_or_equal_to {
    def to_ast
      GreaterThanOrEqualTo.new(left.to_ast, right.to_ast)
    end
  }
  /
  left:add ' <= ' right:less_than_or_equal_to {
    def to_ast
      LessThanOrEqualTo.new(left.to_ast, right.to_ast)
    end
  }
  /
  left:add ' = ' right:equal_to {
    def to_ast
      EqualTo.new(left.to_ast, right.to_ast)
    end
  }
  /
  add
  end

  rule greater_than
    left:add ' > ' right:greater_than {
      def to_ast
        GreaterThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule less_than
    left:add ' < ' right:less_than {
      def to_ast
        LessThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule greater_than_or_equal_to
    left:add ' >= ' right:greater_than {
      def to_ast
        GreaterThanOrEqualTo.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule less_than_or_equal_to
    left:add ' <= ' right:less_than_or_equal_to {
      def to_ast
        LessThanOrEqualTo.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule equal_to
    left:add ' = ' right:equal_to {
      def to_ast
        EqualTo.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule add
    left:multiply ' + ' right:add {
      def to_ast
        Add.new(left.to_ast, right.to_ast)
      end
    }
    /
    left:multiply ' - ' right:add {
      def to_ast
        Subtract.new(left.to_ast, right.to_ast)
      end
    }
    /
    multiply
  end

  rule multiply
    left:brackets ' * ' right:multiply {
      def to_ast
        Multiply.new(left.to_ast, right.to_ast)
      end
    }
    /
    brackets
  end

  rule brackets
    '(' expression ')' {
      def to_ast
        expression.to_ast
      end
    }
    /
    term
  end

  rule term
    number / boolean / variable
  end

  rule number
    ( [0-9]+ / "-" [0-9]+ ) {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule boolean
    ('true' / 'false') ![a-z] {
      def to_ast
        Boolean.new(text_value == 'true')
      end
    }
  end

  rule variable
    [a-z]+ {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end
end
